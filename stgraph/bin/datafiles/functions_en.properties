#<a href="readme_en.txt">To the list of the available documentation</a>
#<h2>STGraph - System defined functions</h2>
#Legend: A=array (or specifically: S=scalar; V=vector; M=matrix); E=expression

#<a href="fun/_op_en.txt">Operators</a>
#<a href="fun/_mat_en.txt">Mathematical functions</a>
#<a href="fun/_stat_en.txt">Statistical functions</a>
#<a href="fun/_control_en.txt">Control functions</a>
#<a href="fun/_vector_en.txt">Array functions</a>

#See also:
#<a href="fun/_monadic_en.txt">Monadic polymorphic functions / operators</a>
#<a href="fun/_diadic_en.txt">Diadic polymorphic functions / operators</a>
#<a href="fun/_boolean_en.txt">Boolean operators</a>
#<a href="fun/_distrib_en.txt">Polymorphic functions handling statistical distributions</a>
#<a href="fun/_interp_en.txt">Interpolation functions</a>
#<b>Operators</b>
x+y = <a href="fun/opAddition_en.txt">x+y</a>: <i>[x,y:A]</i> <code>x</code> plus <code>y</code>
x\&\&y = <a href="fun/opAnd_en.txt">x&&y</a>: <i>[x,y:A]</i> logical conjunction: <code>x</code> and <code>y</code>
x#y = <a href="fun/opConc_en.txt">x#y</a>: <i>[x,y:A]</i> <code>x</code> concatenated with <code>y</code>
x##y = <a href="fun/opDec_en.txt">x##y</a>: <i>[x:S, y:A; x:A, y:S]</i> array obtained by removing the first <code>x</code> elements from each vector in the last dimension of the array <code>y</code> or the last <code>y</code> elements from each vector in the last dimension of the array <code>x</code>
{x} = <a href="fun/opDefExpr_en.txt">{x}</a>: <i>[x:E]</i> subexpression that is assigned the variable <code>$wn</code>, where <code>n</code> ranges from 0 to 3 according to the order of evaluation
x-y = <a href="fun/opDifference_en.txt">x-y</a>: <i>[x,y:A]</i> <code>x</code> minus <code>y</code>
x\=\=y = <a href="fun/opEq_en.txt">x==y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> equal to <code>y</code>?
x>\=y = <a href="fun/opGE_en.txt">x>=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> greater than or equal to <code>y</code>?
x>y = <a href="fun/opGT_en.txt">x>y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> greater than <code>y</code>?
x\<\=y = <a href="fun/opLE_en.txt">x&lt;=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> less than or equal to <code>y</code>?
[x\:y] = <a href="fun/opGenVect1_en.txt">[x:y]</a>: <i>[x,y:S]</i> vector of scalars from <code>x</code> to <code>y</code>
[x\:y\:z] = <a href="fun/opGenVect2_en.txt">[x:y:z]</a>: <i>[x,y,z:S]</i> vector of scalars from <code>x</code> to <code>y</code> separated by <code>z</code>
x\<y = <a href="fun/opLT_en.txt">x&lt;y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> less than <code>y</code>?
-x = <a href="fun/opMinus_en.txt">-x</a>: <i>[x:A]</i> minus <code>x</code>
x%y = <a href="fun/opMod_en.txt">x%y</a>: <i>[x,y:A]</i> <code>x</code> modulus <code>y</code>
x!\=y = <a href="fun/opNE_en.txt">x!=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> different from <code>y</code>?
\!x = <a href="fun/opNot_en.txt">!x</a>: <i>[x:A]</i> logical negation: not <code>x</code>
x\|\|y = <a href="fun/opOr_en.txt">x||y</a>: <i>[x,y:A]</i> logical disjunction: <code>x</code> or <code>y</code>
opPairScan = <a href="fun/opPairScan-1_en.txt">f|x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, vector whose first element is obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, the second element is obtained by applying <code>f</code> to the the second and the third element, and so on; if <code>x</code> is a higher order array, array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opPairScan-2_en.txt">f|[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f|x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>
x^y = <a href="fun/opPower_en.txt">x^y</a>: <i>[x,y:A]</i> <code>x</code> to the power of <code>y</code>
x*y = <a href="fun/opProduct_en.txt">x*y</a>: <i>[x,y:A]</i> <code>x</code> times <code>y</code>
x/y = <a href="fun/opQuotient_en.txt">x/y</a>: <i>[x,y:A]</i> <code>x</code> divided by <code>y</code>
opReduction = <a href="fun/opReduction-1_en.txt">f/x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, scalar obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, then to the result and the third element, and so on; if <code>x</code> is a [n]order array, [n-1]order array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opReduction-2_en.txt">f/[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f/x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>
opScan = <a href="fun/opScan-1_en.txt">f\x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, vector whose first element is obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, the second element is obtained by applying <code>f</code> to the result and the third element, and so on; if <code>x</code> is a higher order array, array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opScan-2_en.txt">f\[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f\x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>
#<b>Mathematical functions</b>
acos = <a href="fun/acos_en.txt">acos(x)</a>: <i>[x:A]</i> arccosine of <code>x</code>
asin = <a href="fun/asin_en.txt">asin(x)</a>: <i>[x:A]</i> arcsine of <code>x</code>
atan = <a href="fun/atan_en.txt">atan(x)</a>: <i>[x:A]</i> arctangent of <code>x</code>
bline = <a href="fun/bline_en.txt">bline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> the <code>y</code> value corresponding to <code>x</code> over the segment from <code>(vx[0],vy[0])</code> to <code>(vx[1],vy[1])</code>, and constant elsewhere
cos = <a href="fun/cos_en.txt">cos(x)</a>: <i>[x:A]</i> cosine of <code>x</code>
deg2rad = <a href="fun/deg2rad_en.txt">deg2rad(x)</a>: <i>[x:A]</i> value of <code>x</code> converted from degrees to radians
exp = <a href="fun/exp_en.txt">exp(x)</a>: <i>[x:A]</i> exponential of <code>x</code>, i.e., <code>e</code> to the power of <code>x</code>
FFT = <a href="fun/FFT_en.txt">FFT(x,s)</a>: <i>[x:V,M; s:S]</i> if <code>s==1</code>, fast Fourier transform of the vector <code>x</code>; if <code>s==2</code>, inverse fast Fourier transform of the matrix <code>x</code>
int = <a href="fun/int_en.txt">int(x)</a>: <i>[x:A]</i> integer part of <code>x</code>
integral = <a href="fun/integral_en.txt">integral(x)</a>: <i>[x:A]</i> in state transitions of state nodes, iterative sum of <code>x</code>, according to the chosen integration algorithm
line = <a href="fun/line_en.txt">line(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> the <code>y</code> value corresponding to <code>x</code> over the straight line crossing the points <code>vx[0],vy[0]</code> and <code>vx[1],vy[1]</code>
log = <a href="fun/log-1_en.txt">log(x)</a>: <i>[x:A]</i> natural logarithm of <code>x</code> <br> <a href="fun/log-2_en.txt">log(x,y)</a>: <i>[x,y:A]</i> logarithm of <code>x</code> to the base <code>y</code>
max = <a href="fun/max_en.txt">max(x,y)</a>: <i>[x,y:A]</i> maximum between <code>x</code> and <code>y</code>
min = <a href="fun/min_en.txt">min(x,y)</a>: <i>[x,y:A]</i> minimum between <code>x</code> and <code>y</code>
mod = <a href="fun/mod_en.txt">mod(x,y)</a>: <i>[x,y:A]</i> <code>x</code> modulus <code>y</code>
pline = <a href="fun/pline_en.txt">pline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> the <code>y</code> value corresponding to <code>x</code> over the polyline whose vertices are in the vectors <code>vx</code> and <code>vy</code>
rad2deg = <a href="fun/rad2deg_en.txt">rad2deg(x)</a>: <i>[x:A]</i> value of <code>x</code> converted from radians to degrees
round = <a href="fun/round_en.txt">round(x,y)</a>: <i>[x,y:A]</i> <code>x</code> rounded to <code>y</code> decimals
sigmoid = <a href="fun/sigmoid_en.txt">sigmoid(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> the <code>y</code> value corresponding to <code>x</code> over the sigmoid controlled by the points <code>vx[0],vy[0]</code> and <code>vx[1],vy[1]</code>
sign = <a href="fun/sign_en.txt">sign(x)</a>: <i>[x:A]</i> sign of <code>x</code>, i.e., <code>1</code> if <code>x > 0</code>, <code>-1</code> if <code>x < 0</code>, <code>0</code> if <code>x == 0</code>
sin = <a href="fun/sin_en.txt">sin(x)</a>: <i>[x:A]</i> sine of <code>x</code>
spline = <a href="fun/spline_en.txt">spline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> the <code>y</code> value corresponding to <code>x</code> over the spline whose node points are in the vectors <code>vx</code> and <code>vy</code>
sqrt = <a href="fun/sqrt_en.txt">sqrt(x)</a>: <i>[x:A]</i> square root of <code>x</code>
tan = <a href="fun/tan_en.txt">tan(x)</a>: <i>[x:A]</i> tangent of <code>x</code>
wrap = <a href="fun/wrap_en.txt">wrap(x,y)</a>: <i>[x,y:A]</i> <code>x</code> modulus <code>y</code> also dealing with negative values
#<b>Statistical functions</b>
beta = <a href="fun/beta_en.txt">beta(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> beta probability distribution of parameters <code>v=[p1,p2]</code>, where <code>p1</code>=alpha (default value: <code>1</code>), <code>p2</code>=beta (default value: <code>1</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>
binomial = <a href="fun/binomial_en.txt">binomial(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> binomial probability distribution of parameters <code>v=[p1,p2]</code>, where <code>p1</code>=population cardinality (default value: <code>10</code>), <code>p2</code>=probability (default value: <code>0.5</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>
chiSquare = <a href="fun/chiSquare_en.txt">chiSquare(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> chi square probability distribution of parameters <code>v=[p1]</code>, where <code>p1</code>=degrees of freedom (default value: <code>5</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>; if <code>s==2</code>, inverse cdf value at the probability <code>x</code>
exponential = <a href="fun/exponential_en.txt">exponential(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> exponential probability distribution of parameters <code>v=[p1]</code>, where <code>p1</code>=lambda (<code>p1>0</code>; default value: <code>1</code>): random number extracted from the distribution if <code>x</code> and <code>s</code> are not specified; value of the pdf, if <code>s==0</code> or the cdf, if <code>s==1</code>, at the point <code>x</code>
gamma = <a href="fun/gamma_en.txt">gamma(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> gamma probability distribution of parameters <code>v=[p1,p2]</code>, where <code>p1</code>=alpha (default value: <code>1</code>), <code>p2</code>=beta (default value: <code>1</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>; if <code>s==2</code>, inverse cdf value at the probability <code>x</code>
gaussian = <a href="fun/gaussian_en.txt">gaussian(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> gaussian probability distribution of parameters <code>v=[p1,p2]</code>, where <code>p1</code>=mean (default value: <code>0</code>), <code>p2</code>=stddev (default value: <code>1</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>; if <code>s==2</code>, inverse cdf value at the probability <code>x</code>
poisson = <a href="fun/poisson_en.txt">poisson(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> Poisson probability distribution of parameters <code>v=[p1]</code>, where <code>p1</code>=mean (<code>p1>0</code>; default value: <code>5</code>): random number extracted from the distribution if <code>x</code> and <code>s</code> are not specified; value of the pdf, if <code>s==0</code> or the cdf, if <code>s==1</code>, at the point <code>x</code>
rand = <a href="fun/rand_en.txt">rand(x,y)</a>: <i>[x,y:S]</i> random number extracted from a uniform distribution between <code>0</code> and <code>1</code>, or between <code>0</code> and <code>x</code> if only <code>x</code> is specified, or between <code>x</code> and <code>y</code> if both are specified
randInt = <a href="fun/randInt_en.txt">randInt(x)</a>: <i>[x:A]</i> integer random number extracted from a uniform distribution between <code>0</code> and <code>int(x-1)</code>
tDistribution = <a href="fun/tDistribution_en.txt">tDistribution(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> t-distribution probability distribution of parameters <code>v=[p1]</code>, where <code>p1</code>=degrees of freedom (<code>p1>0</code>; default value: <code>5</code>): random number extracted from the distribution if <code>x</code> and <code>s</code> are not specified; value of the pdf, if <code>s==0</code> or the cdf, if <code>s==1</code>, at the point <code>x</code>
uniform = <a href="fun/uniform_en.txt">uniform(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> uniform (rectangular) probability distribution of parameters <code>v=[p1,p2]</code>, where <code>p1</code>=mean (default value: <code>0</code>), <code>p2</code>=stddev (default value: <code>1</code>): if <code>x</code> and <code>s</code> are not specified, random number extracted from the distribution; if <code>s==0</code>, pdf value at the point <code>x</code>; if <code>s==1</code>, cdf value at the point <code>x</code>; if <code>s==2</code>, inverse cdf value at the probability <code>x</code>
#<b>Control functions</b>
function = <a href="fun/function_en.txt">function(x)</a>: <i>[x:E]</i> new function, named as the node in which it is used (the node name must start with an underscore) and defined by the expression <code>x</code>
getCProp = <a href="fun/getCProp_en.txt">getCProp(n,x)</a>: <i>[n:node name; x:string]</i> value of the custom property named <code>x</code>, either of the node <code>n</code> or of the current node if <code>n</code> is not specified
getPhases = <a href="fun/getPhases_en.txt">getPhases()</a>: <i>[ ]</i> vector of phases as specified in the "Phase" custom property
if = <a href="fun/if_en.txt">if(c1,x1,c2,x2,...,cn,xn,xn+1)</a>: <i>[c1,...,cn:A; v1,...,vn+1:A]</i> conditional structure: return <code>x1</code> if <code>c1</code> is true, else <code>x2</code> if <code>c2</code> is true, else ..., and <code>xn+1</code> otherwise
indexOrigin = <a href="fun/indexOrigin_en.txt">indexOrigin()</a>: <i>[ ]</i> origin of array indexes, either 0 or 1, as set as model property
isNumber = <a href="fun/isNumber_en.txt">isNumber(x)</a>: <i>[x:A]</i> true if <code>x</code> is a number (i.e., is neither NaN nor Infinity), false otherwise
iter = <a href="fun/iter_en.txt">iter(x,e,z)</a>: <i>[x:A; e:E; z:A]</i> value obtained by repeatedly applying the expression <code>e</code> (possibly including functions of the form <code>fun($0,$1)</code> or <code>$0op$1</code>), whose identity element is <code>z</code>, to the elements of the vector <code>x</code> or to the elements of each vector of the last dimension of the higher dimension array <code>x</code>
readFromNet = <a href="fun/readFromNet_en.txt">readFromNet()</a>: <i>[ ]</i> value read from a Spacebrew network server
readFromXLS = <a href="fun/readFromXLS-1_en.txt">readFromXLS(x,y,r,c)</a>: <i>[x:string; y,r,c:S]</i> value read from the row <code>r</code> and column <code>c</code> of the sheet of index <code>y</code> of the xls workbook whose filename is <code>x</code> <br> <a href="fun/readFromXLS-2_en.txt">readFromXLS(x,y,r1,c1,r2,c2)</a>: <i>[x:string; y,r1,c1,r2,c2:S]</i> vector or matrix read from the row <code>r1</code>, column <code>c1</code> and the row <code>r2</code>, column <code>c2</code> of the sheet of index <code>y</code> of the xls workbook whose filename is <code>x</code>
sysTime = <a href="fun/sysTime_en.txt">sysTime()</a>: <i>[ ]</i> number of milliseconds from the simulation start
writeToNet = <a href="fun/writeToNet_en.txt">writeToNet(x)</a>: <i>[x:A]</i> send <code>x</code> to a Spacebrew network server
#<b>Array functions</b>
array = <a href="fun/array_en.txt">array(v,e)</a>: <i>[v:V, e:E]</i> array whose size is <code>v</code> and whose elements are specified by the expression <code>e</code>, that can contain the system variables <code>$i0</code>,...,<code>$i5</code>, each of them set to the value of the corresponding dimension, and the system variables <code>$p0</code>,...,<code>$p2</code>, set to the previously computed values in the loop
conc = <a href="fun/conc_en.txt">conc(x,y,n)</a>: <i>[x,y:A, n:integer]</i> <code>x</code> concatenated with <code>y</code> along the dimension <code>n</code> if specified or the last dimension otherwise
dec = <a href="fun/dec_en.txt">dec(x,y,n)</a>: <i>[x:S, y:A; x:A, y:S, n:integer]</i> array obtained by removing the first <code>x</code> elements from each vector along the dimension <code>n</code> if specified, or the last dimension otherwise, of the array <code>y</code> or the last <code>y</code> elements from each vector along the dimension <code>n</code> if specified, or the last dimension otherwise, of the array <code>x</code>
frequency = <a href="fun/frequency_en.txt">frequency(x,d,c)</a>: <i>[x:S; d,c:V]</i> vector containing the distribution of the data in <code>d</code> categorized by the values in <code>c</code>; if <code>x</code> is specified it is supposed that <code>d</code> already contains the distribution, to which <code>x</code> is added
get = <a href="fun/get_en.txt">get(x,v0,v1,...)</a>: <i>[x:A; v0,v1,...:V]</i> array obtained from the array <code>x</code> by extracting its subarray of indexes <code>v0</code> from the 0-th dimension, then its subarray of indexes <code>v1</code> from the 1-st dimension, then... (equivalent to <code>x[v0,v1,...]</code>)
getData = <a href="fun/getData_en.txt">getData(x,y)</a>: <i>[x,y:A]</i> vector of the elements of the array <code>y</code> identified by the indexes in the vector <code>x</code> if <code>y</code> is a vector or by the indexes in the matrix <code>x</code> if <code>y</code> is a higher order array
getIndex = <a href="fun/getIndex_en.txt">getIndex(s,x)</a>: <i>[s:S, x:A]</i> if <code>x</code> is a vector, vector of the indexes of the occurrences of <code>s</code> in <code>x</code>; if <code>x</code> is a higher order array, matrix of the indexes of the occurrences of <code>s</code> in <code>x</code>
@x = <a href="fun/opSize_en.txt">@x</a>: <i>[x:A]</i> size of <code>x</code>
order = <a href="fun/order_en.txt">order(x)</a>: <i>[x:A]</i> order, i.e., number of dimensions, of the array <code>x</code>
remove = <a href="fun/remove_en.txt">remove(x,v)</a>: <i>[x:A; v:S,V]</i> array obtained by removing the <code>v</code>-th element(s) from the first dimension of the array <code>x</code>
resize = <a href="fun/resize_en.txt">resize(x,v)</a>: <i>[x:A; v:V]</i> array obtained by resizing the array <code>x</code> to the size <code>v</code>, and by trimming the exceeding trailing elements or padding with trailing zeros if required
set = <a href="fun/set_en.txt">set(x,v0,v1,...,y)</a>: <i>[x:A; v0,v1,...:V; y:A]</i> array obtained from the array <code>x</code> by substituting its subarray of indexes <code>v0</code> from the 0-th dimension, of indexes <code>v1</code> from the 1-st dimension, ... with the array <code>y</code>
shift = <a href="fun/shift_en.txt">shift(x,y,s)</a>: <i>[x,y:A; s:S]</i> array obtained by concatenating the array <code>y</code> to the array <code>x</code> at the left and removing the same number of elements from <code>x</code> at the right if <code>s==0</code> or it is not specified, or in reverse order, if <code>s==1</code>
shuffle = <a href="fun/shuffle_en.txt">shuffle(x)</a>: <i>[x:A]</i> array obtained by randomly permutating the elements of the array <code>x</code>
size = <a href="fun/size_en.txt">size(x)</a>: <i>[x:A]</i> size of <code>x</code>
sort = <a href="fun/sort_en.txt">sort(x,s)</a>: <i>[x:A; s:S]</i> array obtained by sorting the elements of the array <code>x</code>, either in direct order, if <code>s==0</code> or it is not specified, or in reverse order, if <code>s==1</code>
transpose = <a href="fun/transpose_en.txt">transpose(x)</a>: <i>[x:A]</i> array obtained by transposing the array <code>x</code>
