#<a href="readme_it.txt">All'elenco dei documenti disponibili</a>
#<h2>STGraph - Funzioni di sistema</h2>
#Legenda: A=array (o specificamente: S=scalare; V=vettore; M=matrice); E=espressione

#<a href="fun/_op_it.txt">Operatori</a>
#<a href="fun/_mat_it.txt">Funzioni matematiche</a>
#<a href="fun/_stat_it.txt">Funzioni statistiche</a>
#<a href="fun/_control_it.txt">Funzioni di controllo</a>
#<a href="fun/_vector_it.txt">Funzioni per array</a>

#Vedi anche:
#<a href="fun/_monadic_it.txt">Funzioni / operatori monadici polimorfi</a>
#<a href="fun/_diadic_it.txt">Funzioni / operatori diadici polimorfi</a>
#<a href="fun/_boolean_it.txt">Operatori booleani</a>
#<a href="fun/_distrib_it.txt">Funzioni polimorfe per la gestione di distribuzioni statistiche</a>
#<a href="fun/_interp_it.txt">Funzioni di interpolazione</a>
#<b>Operatori</b>
x+y = <a href="fun/opAddition_it.txt">x+y</a>: <i>[x,y:A]</i> <code>x</code> piu' <code>y</code>
x\&\&y = <a href="fun/opAnd_it.txt">x&&y</a>: <i>[x,y:A]</i> congiunzione logica: <code>x</code> e <code>y</code>
x#y = <a href="fun/opConc_it.txt">x#y</a>: <i>[x,y:A]</i> <code>x</code> concatenato con <code>y</code>
x##y = <a href="fun/opDec_it.txt">x##y</a>: <i>[x:S, y:A; x:A, y:S]</i> array ottenuto rimuovendo i primi <code>x</code> elementi da ogni vettore nell'ultima dimensione dell'array <code>y</code> o gli ultimi <code>y</code> elementi da ogni vettore nell'ultima dimensione dell'array <code>x</code>
{x} = <a href="fun/opDefExpr_it.txt">{x}</a>: <i>[x:E]</i> sottoespressione assegnata alla variabile <code>$wn</code>, dove <code>n</code> varia da 0 a 3 secondo l'ordine di valutazione
x-y = <a href="fun/opDifference_it.txt">x-y</a>: <i>[x,y:A]</i> <code>x</code> meno <code>y</code>
x\=\=y = <a href="fun/opEq_it.txt">x==y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' uguale a <code>y</code>?
x>\=y = <a href="fun/opGE_it.txt">x>=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' maggiore o uguale di <code>y</code>?
x>y = <a href="fun/opGT_it.txt">x>y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' maggiore di <code>y</code>?
x\<\=y = <a href="fun/opLE_it.txt">x&lt;=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' minore o uguale di <code>y</code>?
[x\:y] = <a href="fun/opGenVect1_it.txt">[x:y]</a>: <i>[x,y:S]</i> vettore dei valori da <code>x</code> a <code>y</code>
[x\:y\:z] = <a href="fun/opGenVect2_it.txt">[x:y:z]</a>: <i>[x,y,z:S]</i> vettore dei valori da <code>x</code> a <code>z</code> separati per <code>z</code>
x\<y = <a href="fun/opLT_it.txt">x&lt;y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' minore di <code>y</code>?
-x = <a href="fun/opMinus_it.txt">-x</a>: <i>[x:A]</i> meno <code>x</code>
x%y = <a href="fun/opMod_it.txt">x%y</a>: <i>[x,y:A]</i> <code>x</code> modulo <code>y</code>
x!\=y = <a href="fun/opNE_it.txt">x!=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' diverso da <code>y</code>?
\!x = <a href="fun/opNot_it.txt">!x</a>: <i>[x:A]</i> negazione logica: non <code>x</code>
x\|\|y = <a href="fun/opOr_it.txt">x||y</a>: <i>[x,y:A]</i> disgiunzione logica: <code>x</code> o <code>y</code>
opPairScan = <a href="fun/opPairScan-1_it.txt">f|x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, vettore il cui primo elemento e' ottenuto applicando la funzione diadica <code>f</code> ai primi due elementi di <code>x</code>, il secondo elemento e' ottenuto applicando <code>f</code> al secondo e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine superiore, array ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opPairScan-2_it.txt">f|[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f|x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
x^y = <a href="fun/opPower_it.txt">x^y</a>: <i>[x,y:A]</i> <code>x</code> elevato alla potenza <code>y</code>
x*y = <a href="fun/opProduct_it.txt">x*y</a>: <i>[x,y:A]</i> <code>x</code> per <code>y</code>
x/y = <a href="fun/opQuotient_it.txt">x/y</a>: <i>[x,y:A]</i> <code>x</code> diviso <code>y</code>
opReduction = <a href="fun/opReduction-1_it.txt">f/x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, scalare ottenuto applicando la funzione diadica <code>f</code> ai primi due elementi di <code>x</code>, quindi al risultato e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine <code>n</code>, array di ordine <code>n-1</code> ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opReduction-2_it.txt">f/[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f/x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
opScan = <a href="fun/opScan-1_it.txt">f\x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, vettore il cui primo elemento e' ottenuto applicando la funzione didadica <code>f</code> ai primi due elementi di <code>x</code>, il secondo elemento e' ottenuto applicando <code>f</code> al risultato e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine superiore, array ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opScan-2_it.txt">f\[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f\x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
@x = <a href="fun/opSize_it.txt">@x</a>: <i>[x:A]</i> dimensione di <code>x</code>
#<b>Funzioni matematiche</b>
acos = <a href="fun/acos_it.txt">acos(x)</a>: <i>[x:A]</i> arcocoseno di <code>x</code>
asin = <a href="fun/asin_it.txt">asin(x)</a>: <i>[x:A]</i> arcoseno di <code>x</code>
atan = <a href="fun/atan_it.txt">atan(x)</a>: <i>[x:A]</i> arcotangente di <code>x</code>
bline = <a href="fun/bline_it.txt">bline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> il valore <code>y</code> corrispondente a <code>x</code> sul segmento da <code>(vx[0],vy[0])</code> a <code>(vx[1],vy[1])</code>, e costante altrove
cos = <a href="fun/cos_it.txt">cos(x)</a>: <i>[x:A]</i> coseno di <code>x</code>
deg2rad = <a href="fun/deg2rad_it.txt">deg2rad(x)</a>: <i>[x:A]</i> valore di <code>x</code> convertito da gradi a radianti
exp = <a href="fun/exp_it.txt">exp(x)</a>: <i>[x:A]</i> esponenziale di <code>x</code> (<code>e</code> elevato alla potenza <code>x</code>)
FFT = <a href="fun/FFT_it.txt">FFT(x,s)</a>: <i>[x:V,M; s:S]</i> se <code>s==1</code>, trasformata veloce di Fourier del vettore <code>x</code>; se <code>s==2</code>, antitrasformata veloce di Fourier della matrice <code>x</code>
int = <a href="fun/int_it.txt">int(x)</a>: <i>[x:A]</i> parte intera di <code>x</code>
integral = <a href="fun/integral_it.txt">integral(x)</a>: <i>[x:A]</i> nelle transizioni di stato dei nodi di stato, somma iterativa di <code>x</code>, sulla base dell'algoritmo di integrazione scelto
line = <a href="fun/line_it.txt">line(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> valore <code>y</code> corrispondente a <code>x</code> sulla linea retta per i punti <code>vx[0],vy[0]</code> e <code>vx[1],vy[1]</code>
log = <a href="fun/log-1_it.txt">log(x)</a>: <i>[x:A]</i> logaritmo naturale di <code>x</code> <br> <a href="fun/log-2_it.txt">log(x,y)</a>: <i>[x,y:A]</i> logaritmo di <code>x</code> in base <code>y</code>
max = <a href="fun/max_it.txt">max(x,y)</a>: <i>[x,y:A]</i> massimo tra <code>x</code> e <code>y</code>
min = <a href="fun/min_it.txt">min(x,y)</a>: <i>[x,y:A]</i> minimo tra <code>x</code> e <code>y</code>
mod = <a href="fun/mod_it.txt">mod(x,y)</a>: <i>[x,y:A]</i> <code>x</code> modulo <code>y</code>
pline = <a href="fun/pline_it.txt">pline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> valore <code>y</code> corrispondente a <code>x</code> sulla polinomiale i cui vertici sono nei vettori <code>vx</code> e <code>vy</code>
rad2deg = <a href="fun/rad2deg_it.txt">rad2deg(x)</a>: <i>[x:A]</i> valore di <code>x</code> convertito da radianti a gradi
round = <a href="fun/round_it.txt">round(x,y)</a>: <i>[x,y:A]</i> <code>x</code> arrotondato a <code>y</code> decimali
sigmoid = <a href="fun/sigmoid_it.txt">sigmoid(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> valore <code>y</code> corrispondente a <code>x</code> sulla sigmoide controllata dai punti <code>vx[0],vy[0]</code> e <code>vx[1],vy[1]</code>
sign = <a href="fun/sign_it.txt">sign(x)</a>: <i>[x:A]</i> segno di <code>x</code>, cioe' <code>1</code> se <code>x > 0</code>, <code>-1</code> se <code>x < 0</code>, <code>0</code> se <code>x == 0</code>
sin = <a href="fun/sin_it.txt">sin(x)</a>: <i>[x:A]</i> seno di <code>x</code>
spline = <a href="fun/spline_it.txt">spline(vx,vy,x)</a>: <i>[vx,vy:V, x:A]</i> valore <code>y</code> corrispondente a <code>x</code> sulla spline i cui nodi sono nei vettori <code>vx</code> e <code>vy</code>
sqrt = <a href="fun/sqrt_it.txt">sqrt(x)</a>: <i>[x:A]</i> radice quadrata di <code>x</code>
tan = <a href="fun/tan_it.txt">tan(x)</a>: <i>[x:A]</i> tangente di <code>x</code>
wrap = <a href="fun/wrap_it.txt">wrap(x,y)</a>: <i>[x,y:A]</i> <code>x</code> modulo <code>y</code> con gestione dei valori negativi
#<b>Funzioni statistiche</b>
beta = <a href="fun/beta_it.txt">beta(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' beta, di parametri <code>v=[p1,p2]</code>, con <code>p1</code>=alpha (default: <code>1</code>), <code>p2</code>=beta (default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>
binomial = <a href="fun/binomial_it.txt">binomial(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' binomiale, di parametri <code>v=[p1,p2]</code>, con <code>p1</code>=mean (default: <code>0</code>), <code>p2</code>=stddev (default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>
chiSquare = <a href="fun/chiSquare_it.txt">chiSquare(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' chi quadro, con parametri <code>v=[p1]</code>, con <code>p1</code>=gradi di liberta' (default: <code>5</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>; se <code>s==2</code>, valore della cdf inversa per la probabilita' <code>x</code>
exponential = <a href="fun/exponential_it.txt">exponential(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' esponenziale, con parametri <code>v=[p1]</code>, dove <code>p1</code>=lambda (<code>p1>0</code>; default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>
gamma = <a href="fun/gamma_it.txt">gamma(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' gamma, di parametri <code>v=[p1,p2]</code>, con <code>p1</code>=alpha (default: <code>1</code>), <code>p2</code>=beta (default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>; se <code>s==2</code>, valore della cdf inversa per la probabilita' <code>x</code>
gaussian = <a href="fun/gaussian_it.txt">gaussian(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' gaussiana, di parametri <code>v=[p1,p2]</code>, con <code>p1</code>=mean (default: <code>0</code>), <code>p2</code>=stddev (default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>; se <code>s==2</code>, valore della cdf inversa per la probabilita' <code>x</code>
poisson = <a href="fun/poisson_it.txt">poisson(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' di Poisson, di parametri <code>v=[p1]</code>, con <code>p1</code>=mean (<code>p1>0</code>; default: <code>5</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>
rand = <a href="fun/rand_it.txt">rand(x,y)</a>: <i>[x,y:S]</i> valore casuale estratto da una distribuzione uniforme tra <code>0</code> e <code>1</code>, o tra <code>0</code> e <code>x</code> se solo <code>x</code> e' specificato, o tra <code>x</code> e <code>y</code> se entrambi sono specificati
randInt = <a href="fun/randInt_it.txt">randInt(x)</a>: <i>[x:A]</i> valore casuale intero estratto da una distribuzione uniforme tra <code>0</code> e <code>int(x-1)</code>
tDistribution = <a href="fun/tDistribution_it.txt">tDistribution(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' t, di parametri <code>v=[p1]</code>, con <code>p1</code>=gradi di liberta' (<code>p1>0</code>; default: <code>5</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>
uniform = <a href="fun/uniform_it.txt">uniform(v,x,s)</a>: <i>[v:V; x:A; s:S]</i> distribuzione di probabilita' uniforme (rettangolare), di parametri <code>v=[p1,p2]</code>, con <code>p1</code>=mean (default: <code>0</code>), <code>p2</code>=stddev (default: <code>1</code>): se <code>x</code> e <code>s</code> non sono specificati, valore casuale estratto dalla distribuzione; se <code>s==0</code>, valore della pdf in <code>x</code>; se <code>s==1</code>, valore della cdf in <code>x</code>; se <code>s==2</code>, valore della cdf inversa per la probabilita' <code>x</code>
#<b>Funzioni di controllo</b>
function = <a href="fun/function_it.txt">function(x)</a>: <i>[x:E]</i> nuova funzione, chiamata come il nodo in cui e' definita (il nome del nodo deve cominciare con un underscore) e definita dall'espressione <code>x</code>
getCProp = <a href="fun/getCProp_it.txt">getCProp(n,x)</a>: <i>[n:nome di nodo; x:stringa]</i> valore della proprieta' custom di nome <code>x</code>, o del nodo <code>n</code> o del nodo corrente se <code>n</code> non e' specificato
getPhases = <a href="fun/getPhases_it.txt">getPhases()</a>: <i>[ ]</i> vettore di fasi specificato nella proprieta' custom "Phase"
if = <a href="fun/if_it.txt">if(c1,x1,c2,x2,...,cn,xn,xn+1)</a>: <i>[c1,...,cn:A; v1,...,vn+1:A]</i> struttura condizionale: restituisce <code>x1</code> se <code>c1</code> e' vero, altrimenti <code>x2</code> se <code>c2</code> e' vero, altrimenti ..., e <code>xn+1</code> altrimenti
indexOrigin = <a href="fun/indexOrigin_it.txt">indexOrigin()</a>: <i>[ ]</i> origine degli indici degli array,, 0 o 1, assegnata come propriet� del modello
isNumber = <a href="fun/isNumber_it.txt">isNumber(x)</a>: <i>[x:A]</i> vero se <code>x</code> e' un numero (cioe' non e' ne' NaN ne' Infinity), falso altrimenti
iter = <a href="fun/iter_it.txt">iter(x,e,z)</a>: <i>[x:A; e:E; z:A]</i> valore ottenuto applicando ripetutamente l'espressione <code>e</code> (che puo' includere funzioni della forma <code>fun($0,$1)</code> oppure <code>$0op$1</code>), il cui elemento identita' e' <code>z</code>, agli elementi del vettore <code>x</code> o agli elementi di ogni vettore dell'ultima dimensione dell'array di ordine superiore <code>x</code>
readFromNet = <a href="fun/readFromNet_it.txt">readFromNet()</a>: <i>[ ]</i> valore letto da un server di rete Spacebrew
ReadFromXLS = <a href="fun/ReadFromXLS-1_it.txt">readFromXLS(x,y,r,c)</a>: <i>[x:stringa; y,r,c:S]</i> valore letto dalla riga <code>r</code> e colonna <code>c</code> del foglio di indice <code>y</code> del file xls il cui nome e' <code>x</code> <br> <a href="fun/readFromXLS-2_it.txt">readFromXLS(x,y,r1,c1,r2,c2)</a>: <i>[x:stringa; y,r1,c1,r2,c2:S]</i> vettore o matrice letti tra la cella di riga <code>r1</code> e colonna <code>c1</code> e la cella di riga <code>r2</code> e colonna <code>c2</code> del foglio di indice <code>y</code> del file xls il cui nome e' <code>x</code>
sysTime = <a href="fun/sysTime_it.txt">sysTime()</a>: <i>[ ]</i> numero di millisecondi dall'inizio della simulazione
writeToNet = <a href="fun/writeToNet_it.txt">writeToNet(x)</a>: <i>[x:A]</i> invia <code>x</code> a un server di rete Spacebrew
#<b>Funzioni per array</b>
array = <a href="fun/array_it.txt">array(v,e)</a>: <i>[v:V, e:E]</i> array la cui dimensione e' <code>v</code> e i cui elementi sono specificati dall'espressione <code>e</code>, che puo' contenere le variabili di sistema <code>$i0</code>,...,<code>$i5</code>, ognuna di esse assegnata al valore della dimensione corrispondente, e le variabili di sistema <code>$p0</code>,...,<code>$p2</code>, assegnate ai valori calcolati in precedenza nel loop
conc = <a href="fun/conc_it.txt">conc(x,y,n)</a>: <i>[x,y:A, n:intero]</i> <code>x</code> concatenato con <code>y</code> lungo la dimensione <code>n</code> se specificata o l'ultima dimensione altrimenti
dec = <a href="fun/dec_it.txt">dec(x,y,n)</a>: <i>[x:S, y:A; x:A, y:S, n:intero]</i> array ottenuto rimuovendo i primi <code>x</code> elementi da ogni vettore lungo la dimensione <code>n</code> se specificata, o l'ultima dimensione altrimenti, dell'array <code>y</code> o gli ultimi <code>y</code> elementi da ogni vettore lungo la dimensione <code>n</code> se specificata, o l'ultima dimensione altrimenti, dell'array <code>x</code>
frequency = <a href="fun/frequency_it.txt">frequency(x,d,c)</a>: <i>[x:S; d,c:V]</i> vettore che contiene la distribuzione dei dati in <code>d</code> categorizzati dai valori in <code>c</code>; se <code>x</code> e' specificato, si suppone che <code>d</code> gia' contenga la distribuzione, a cui <code>x</code> e' aggiunto
get = <a href="fun/get_it.txt">get(x,v0,v1,...)</a>: <i>[x:A; v0,v1,...:V]</i> array ottenuto dall'array <code>x</code> estraendo il sottoarray di indici <code>v0</code> dalla prima dimensione, quindi il sottoarray di indici <code>v1</code> dalla seconda dimensione, e cosi' via (equivalente a <code>x[v0,v1,...]</code>)
getData = <a href="fun/getData_it.txt">getData(x,y)</a>: <i>[x,y:A]</i> vettore degli elementi dell'array <code>y</code> identificati dagli indici nel vettore <code>x</code> se <code>y</code> e' un vettore o dagli indici nella matrice <code>x</code> se <code>y</code> e' un array di ordine superiore
getIndex = <a href="fun/getIndex_it.txt">getIndex(s,x)</a>: <i>[s:S, x:A]</i> se <code>x</code> e' un vettore, vettore degli indici delle occorrenze di <code>s</code> in <code>x</code>; se <code>x</code> e' un array di ordine superiore, matrice degli indici delle occorrenze di <code>s</code> in <code>x</code>
order = <a href="fun/order_it.txt">order(x)</a>: <i>[x:A]</i> ordine, cioe' numero delle dimensioni, dell'array <code>x</code>
remove = <a href="fun/remove_it.txt">remove(x,v)</a>: <i>[x:A; v:S,V]</i> array ottenuto eliminando l'elemento / gli elementi <code>v</code>-esimo/i dalla prima dimensione dell'array <code>x</code>
resize = <a href="fun/resize_it.txt">resize(x,v)</a>: <i>[x:A; v:V]</i> array ottenuto ridimensionando l'array <code>x</code> alla dimensione <code>v</code>, ed eliminando gli elementi eccedenti in coda o aggiungendo zeri in coda, se richiesto
set = <a href="fun/set_it.txt">set(x,v0,v1,...,y)</a>: <i>[x:A; v0,v1,...:V; y:A]</i> array ottenuto dall'array <code>x</code> sostituendo il suo sottoarray di indici <code>v0</code> nella prima dimensione, di indici <code>v1</code> nella seconda dimensione, ... con l'array <code>y</code>
shift = <a href="fun/shift_it.txt">shift(x,y,s)</a>: <i>[x,y:A; s:S]</i> array ottenuto concatenando l'array <code>y</code> con l'array <code>x</code> a sinistra e rimuovendo lo stesso numero di elementi da <code>x</code> a destra se <code>s==0</code> o se non specificato, o in ordine inverso se <code>s==1</code>
shuffle = <a href="fun/shuffle_it.txt">shuffle(x)</a>: <i>[x:A]</i> array ottenuto permutando in modo casuale gli elementi dell'array <code>x</code>
size = <a href="fun/size_it.txt">size(x)</a>: <i>[x:A]</i> dimensione di <code>x</code>
sort = <a href="fun/sort_it.txt">sort(x,s)</a>: <i>[x:A; s:S]</i> array ottenuto ordinando gli elementi dell'array <code>x</code>, in ordine diretto se <code>s==0</code> o se non specificato, o in ordine inverso se <code>s==1</code>
transpose = <a href="fun/transpose_it.txt">transpose(x)</a>: <i>[x:A]</i> array ottenuto per trasposizione dell'array <code>x</code>
