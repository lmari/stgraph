#<h2>STGraph - Operatori</h2>
x+y = <a href="fun/opAddition_it.txt">x+y</a>: <i>[x,y:A]</i> <code>x</code> piu' <code>y</code>
x\&\&y = <a href="fun/opAnd_it.txt">x&&y</a>: <i>[x,y:A]</i> congiunzione logica: <code>x</code> e <code>y</code>
x#y = <a href="fun/opConc_it.txt">x#y</a>: <i>[x,y:A]</i> <code>x</code> concatenato con <code>y</code>
x##y = <a href="fun/opDec_it.txt">x##y</a>: <i>[x:S, y:A; x:A, y:S]</i> array ottenuto rimuovendo i primi <code>x</code> elementi da ogni vettore nell'ultima dimensione dell'array <code>y</code> o gli ultimi <code>y</code> elementi da ogni vettore nell'ultima dimensione dell'array <code>x</code>
{x} = <a href="fun/opDefExpr_it.txt">{x}</a>: <i>[x:E]</i> sottoespressione assegnata alla variabile <code>$wn</code>, dove <code>n</code> varia da 0 a 3 secondo l'ordine di valutazione
x-y = <a href="fun/opDifference_it.txt">x-y</a>: <i>[x,y:A]</i> <code>x</code> meno <code>y</code>
x\=\=y = <a href="fun/opEq_it.txt">x==y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' uguale a <code>y</code>?
x>\=y = <a href="fun/opGE_it.txt">x>=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' maggiore o uguale di <code>y</code>?
x>y = <a href="fun/opGT_it.txt">x>y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' maggiore di <code>y</code>?
x\<\=y = <a href="fun/opLE_it.txt">x&lt;=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' minore o uguale di <code>y</code>?
[x\:y] = <a href="fun/opGenVect1_it.txt">[x:y]</a>: <i>[x,y:S]</i> vettore dei valori da <code>x</code> a <code>y</code>
[x\:y\:z] = <a href="fun/opGenVect2_it.txt">[x:y:z]</a>: <i>[x,y,z:S]</i> vettore dei valori da <code>x</code> a <code>z</code> separati per <code>z</code>
x\<y = <a href="fun/opLT_it.txt">x&lt;y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' minore di <code>y</code>?
-x = <a href="fun/opMinus_it.txt">-x</a>: <i>[x:A]</i> meno <code>x</code>
x%y = <a href="fun/opMod_it.txt">x%y</a>: <i>[x,y:A]</i> <code>x</code> modulo <code>y</code>
x!\=y = <a href="fun/opNE_it.txt">x!=y</a>: <i>[x,y:A]</i> confronto logico: <code>x</code> e' diverso da <code>y</code>?
\!x = <a href="fun/opNot_it.txt">!x</a>: <i>[x:A]</i> negazione logica: non <code>x</code>
x\|\|y = <a href="fun/opOr_it.txt">x||y</a>: <i>[x,y:A]</i> disgiunzione logica: <code>x</code> o <code>y</code>
opPairScan = <a href="fun/opPairScan-1_it.txt">f|x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, vettore il cui primo elemento e' ottenuto applicando la funzione diadica <code>f</code> ai primi due elementi di <code>x</code>, il secondo elemento e' ottenuto applicando <code>f</code> al secondo e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine superiore, array ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opPairScan-2_it.txt">f|[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f|x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
x^y = <a href="fun/opPower_it.txt">x^y</a>: <i>[x,y:A]</i> <code>x</code> elevato alla potenza <code>y</code>
x*y = <a href="fun/opProduct_it.txt">x*y</a>: <i>[x,y:A]</i> <code>x</code> per <code>y</code>
x/y = <a href="fun/opQuotient_it.txt">x/y</a>: <i>[x,y:A]</i> <code>x</code> diviso <code>y</code>
opReduction = <a href="fun/opReduction-1_it.txt">f/x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, scalare ottenuto applicando la funzione diadica <code>f</code> ai primi due elementi di <code>x</code>, quindi al risultato e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine <code>n</code>, array di ordine <code>n-1</code> ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opReduction-2_it.txt">f/[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f/x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
opScan = <a href="fun/opScan-1_it.txt">f\x</a>: <i>[f:funzione; x:A]</i> se <code>x</code> e' un vettore, vettore il cui primo elemento e' ottenuto applicando la funzione didadica <code>f</code> ai primi due elementi di <code>x</code>, il secondo elemento e' ottenuto applicando <code>f</code> al risultato e al terzo elemento, e cosi' via; se <code>x</code> e' un array di ordine superiore, array ottenuto nello stesso modo, applicando <code>f</code> in parallelo agli elementi di ogni vettore dell'ultima dimensione <br> <a href="fun/opScan-2_it.txt">f\[n]x</a>: <i>[f:funzione; x:A; n:intero]</i> come f\x, dove <code>f</code> e' applicato alla dimensione <code>n</code> di <code>x</code>
@x = <a href="fun/opSize_it.txt">@x</a>: <i>[x:A]</i> dimensione di <code>x</code>



<hr>
<a href="functions_en.properties">List of functions</a>
