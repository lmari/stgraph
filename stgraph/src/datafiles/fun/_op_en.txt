#<h2>STGraph - Operators</h2>
x+y = <a href="fun/opAddition_en.txt">x+y</a>: <i>[x,y:A]</i> <code>x</code> plus <code>y</code>
x\&\&y = <a href="fun/opAnd_en.txt">x&&y</a>: <i>[x,y:A]</i> logical conjunction: <code>x</code> and <code>y</code>
x#y = <a href="fun/opConc_en.txt">x#y</a>: <i>[x,y:A]</i> <code>x</code> concatenated with <code>y</code>
x##y = <a href="fun/opDec_en.txt">x##y</a>: <i>[x:S, y:A; x:A, y:S]</i> array obtained by removing the first <code>x</code> elements from each vector in the last dimension of the array <code>y</code> or the last <code>y</code> elements from each vector in the last dimension of the array <code>x</code>
{x} = <a href="fun/opDefExpr_en.txt">{x}</a>: <i>[x:E]</i> subexpression that is assigned the variable <code>$wn</code>, where <code>n</code> ranges from 0 to 3 according to the order of evaluation
x-y = <a href="fun/opDifference_en.txt">x-y</a>: <i>[x,y:A]</i> <code>x</code> minus <code>y</code>
x\=\=y = <a href="fun/opEq_en.txt">x==y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> equal to <code>y</code>?
x>\=y = <a href="fun/opGE_en.txt">x>=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> greater than or equal to <code>y</code>?
x>y = <a href="fun/opGT_en.txt">x>y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> greater than <code>y</code>?
x\<\=y = <a href="fun/opLE_en.txt">x&lt;=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> less than or equal to <code>y</code>?
[x\:y] = <a href="fun/opGenVect1_en.txt">[x:y]</a>: <i>[x,y:S]</i> vector of scalars from <code>x</code> to <code>y</code>
[x\:y\:z] = <a href="fun/opGenVect2_en.txt">[x:y:z]</a>: <i>[x,y,z:S]</i> vector of scalars from <code>x</code> to <code>y</code> separated by <code>z</code>
x\<y = <a href="fun/opLT_en.txt">x&lt;y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> less than <code>y</code>?
-x = <a href="fun/opMinus_en.txt">-x</a>: <i>[x:A]</i> minus <code>x</code>
x%y = <a href="fun/opMod_en.txt">x%y</a>: <i>[x,y:A]</i> <code>x</code> modulus <code>y</code>
x!\=y = <a href="fun/opNE_en.txt">x!=y</a>: <i>[x,y:A]</i> logical comparison: is <code>x</code> different from <code>y</code>?
\!x = <a href="fun/opNot_en.txt">!x</a>: <i>[x:A]</i> logical negation: not <code>x</code>
x\|\|y = <a href="fun/opOr_en.txt">x||y</a>: <i>[x,y:A]</i> logical disjunction: <code>x</code> or <code>y</code>
opPairScan = <a href="fun/opPairScan-1_en.txt">f|x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, vector whose first element is obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, the second element is obtained by applying <code>f</code> to the the second and the third element, and so on; if <code>x</code> is a higher order array, array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opPairScan-2_en.txt">f|[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f|x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>
x^y = <a href="fun/opPower_en.txt">x^y</a>: <i>[x,y:A]</i> <code>x</code> to the power of <code>y</code>
x*y = <a href="fun/opProduct_en.txt">x*y</a>: <i>[x,y:A]</i> <code>x</code> times <code>y</code>
x/y = <a href="fun/opQuotient_en.txt">x/y</a>: <i>[x,y:A]</i> <code>x</code> divided by <code>y</code>
opReduction = <a href="fun/opReduction-1_en.txt">f/x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, scalar obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, then to the result and the third element, and so on; if <code>x</code> is a [n]order array, [n-1]order array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opReduction-2_en.txt">f/[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f/x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>
opScan = <a href="fun/opScan-1_en.txt">f\x</a>: <i>[f:function; x:A]</i> if <code>x</code> is a vector, vector whose first element is obtained by applying the dyadic function / operator <code>f</code> to the first two elements of <code>x</code>, the second element is obtained by applying <code>f</code> to the result and the third element, and so on; if <code>x</code> is a higher order array, array obtained in the same way by applying <code>f</code> in parallel to the elements of each vector of the last dimension <br> <a href="fun/opScan-2_en.txt">f\[n]x</a>: <i>[f:function; x:A; n:integer]</i> as f\x, where <code>f</code> is applied to the dimension <code>n</code> of <code>x</code>



<hr>
<a href="functions_en.properties">List of functions</a>
