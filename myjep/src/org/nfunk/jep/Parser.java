/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package org.nfunk.jep;

import org.nfunk.jep.function.PostfixMathCommandI;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();private JEP jep;
        private SymbolTable symTab;
        private OperatorSet opSet;
        private int initialTokenManagerState = DEFAULT;

        public Node parseStream(java.io.Reader stream, JEP jep_in) throws ParseException {
                restart(stream,jep_in);
                // Parse the expression, and return the enable_tracing();
                Node node = Start();
                if(node == null) throw new ParseException(JEP.getMessage("JEP.ERR.NOEXPR")); // modified by lm
                return node.jjtGetChild(0);
        }

        /**
	 * Restart the parse with the given stream.
	 * @since 2.3.0 beta 1
	 */
        public void restart(java.io.Reader stream, JEP jep_in) {
                ReInit(stream);
                this.token_source.SwitchTo(initialTokenManagerState);
                jep = jep_in;
                symTab = jep.getSymbolTable();
                opSet = jep.getOperatorSet();
        }

        /**
	 * Continue parsing without re-initialising stream.
	 * Allows reentrancy of parser so that strings like
	 * "x=1; y=2; z=3;" can be parsed.
	 * When a semi colon is encountered parsing finishes leaving the rest of the string unparsed.
	 * Parsing can be resumed from the current position by using this method.
	 * For example
	 * <pre>
	 * XJep j = new XJep();
	 * Parser parse = j.getParse();
	 * StringReader sr = new StringReader("x=1; y=2; z=3;");
	 * parse.restart(sr,j);
	 * Node node;
	 * try {
	 * while((node = j.continueParse())!=null) {
	 *    j.println(node);
	 * } }catch(ParseException e) {}
	 * </pre>
	 */
        public Node continueParse() throws ParseException {
                ASTStart node = Start();
                if(node==null) return null;
                return node.jjtGetChild(0);
        }

        private void addToErrorList(String errorStr) {
                jep.errorList.addElement(errorStr);
        }

        /**
	 * Sets the initial state that the token manager is in.
	 * Can be used to change how x.x is interpreted, either as a single
	 * identifier (DEFAULT) or as x <DOT> x (NO_DOT_IN_IDENTIFIERS)
	 * @param state the state to be in. Currently the only legal values are DEFAULT and NO_DOT_IN_IDENTIFIER
	 */
        public void setInitialTokenManagerState(int state) {
                initialTokenManagerState = state;
        }

        /**
	 * Translate all escape sequences to characters. Inspired by Rob Millar's
	 * unescape() method in rcm.util.Str fron the Web Sphinx project.
	 *
	 * @param inputStr String containing escape characters.
	 * @return String with all escape sequences replaced.
	 */
        private String replaceEscape(String inputStr) {
                int len = inputStr.length();
                int p = 0;
                int i;
                String metachars = "tnrbf\u005c\u005c\u005c"'";
                String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";
                StringBuffer output = new StringBuffer();
                while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
                        output.append(inputStr.substring(p, i));
                        if(i+1 == len) break;
                        // find metacharacter
                        char metac = inputStr.charAt(i+1);
                        // find the index of the metac
                        int k = metachars.indexOf(metac);
                        if(k == -1) {
                                // didn't find the metachar, leave sequence as found.
                                // This code should be unreachable if the parser
                                // is functioning properly because strings containing
                                // unknown escape characters should not be accepted.
                                output.append('\u005c\u005c');
                                output.append(metac);
                        } else {
                                // its corresponding true char
                                output.append(chars.charAt(k));
                        }
                        // skip over both escape character & metacharacter
                        p = i + 2;
                }
                // add the end of the input string to the output
                if(p < len) output.append(inputStr.substring(p));
                return output.toString();
        }

/***************************************************************
GRAMMAR START
***************************************************************/
  final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SEMI);
        Expression();
      }
      jj_consume_token(0);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(OR);
        AndExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getOr());
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(AND);
        EqualExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getAnd());
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
    }
  }

  final public void EqualExpression() throws ParseException {
    RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NE:
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(NE);
          RelationalExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getNE());
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
      case EQ:
                          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(EQ);
          RelationalExpression();
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                  jjtn002.setOperator(opSet.getEQ());
        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LT);
          AdditiveExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getLT());
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
      case GT:
                          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(GT);
          AdditiveExpression();
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                  jjtn002.setOperator(opSet.getGT());
        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
        }
        break;
      case LE:
                          ASTFunNode jjtn003 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(LE);
          AdditiveExpression();
                                  jjtree.closeNodeScope(jjtn003,  2);
                                  jjtc003 = false;
                                  jjtn003.setOperator(opSet.getLE());
        } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
        }
        break;
      case GE:
                          ASTFunNode jjtn004 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(GE);
          AdditiveExpression();
                                  jjtree.closeNodeScope(jjtn004,  2);
                                  jjtc004 = false;
                                  jjtn004.setOperator(opSet.getGE());
        } catch (Throwable jjte004) {
                          if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte004;}
                          }
                          if (jjte004 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte004;}
                          }
                          {if (true) throw (Error)jjte004;}
        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
          MultiplicativeExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getAdd());
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
      case MINUS:
                          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
          MultiplicativeExpression();
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                  jjtn002.setOperator(opSet.getSubtract());
        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
                                    Operator op = null; Operator op2 = null;
    UnaryExpression();
    label_7:
    while (true) {
      if (jj_2_1(1)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_2(1)) {
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          PowerExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                        if(!jep.implicitMul) {if (true) throw new ParseException(JEP.getMessage("JEP.ERR.IMPL_MULT"));} // modified by lm
                                        jjtn001.setOperator(opSet.getMultiply());
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
                          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(MUL);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                  jjtn002.setOperator(opSet.getMultiply());
          } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
          } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
          }
          break;
        case DOT:
                          ASTFunNode jjtn003 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(DOT);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn003,  2);
                                  jjtc003 = false;
                                  jjtn003.setOperator(opSet.getDot());
          } catch (Throwable jjte003) {
                          if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte003 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte003;}
                          }
                          if (jjte003 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte003;}
                          }
                          {if (true) throw (Error)jjte003;}
          } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
          }
          break;
        case CROSS:
                          ASTFunNode jjtn004 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(CROSS);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn004,  2);
                                  jjtc004 = false;
                                  jjtn004.setOperator(opSet.getCross());
          } catch (Throwable jjte004) {
                          if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte004;}
                          }
                          if (jjte004 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte004;}
                          }
                          {if (true) throw (Error)jjte004;}
          } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
          }
          break;
        case DIV:
                          ASTFunNode jjtn005 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
          try {
            jj_consume_token(DIV);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn005,  2);
                                  jjtc005 = false;
                                  jjtn005.setOperator(opSet.getDivide());
          } catch (Throwable jjte005) {
                          if (jjtc005) {
                            jjtree.clearNodeScope(jjtn005);
                            jjtc005 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte005 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte005;}
                          }
                          if (jjte005 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte005;}
                          }
                          {if (true) throw (Error)jjte005;}
          } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  2);
                          }
          }
          break;
        case MOD:
                          ASTFunNode jjtn006 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(MOD);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn006,  2);
                                  jjtc006 = false;
                                  jjtn006.setOperator(opSet.getMod());
          } catch (Throwable jjte006) {
                          if (jjtc006) {
                            jjtree.clearNodeScope(jjtn006);
                            jjtc006 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte006 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte006;}
                          }
                          if (jjte006 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte006;}
                          }
                          {if (true) throw (Error)jjte006;}
          } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006,  2);
                          }
          }
          break;
        case SHARP:
                          ASTFunNode jjtn007 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc007 = true;
                          jjtree.openNodeScope(jjtn007);
          try {
            jj_consume_token(SHARP);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn007,  2);
                                  jjtc007 = false;
                                  jjtn007.setOperator(opSet.getConcatenate());
          } catch (Throwable jjte007) {
                          if (jjtc007) {
                            jjtree.clearNodeScope(jjtn007);
                            jjtc007 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte007 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte007;}
                          }
                          if (jjte007 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte007;}
                          }
                          {if (true) throw (Error)jjte007;}
          } finally {
                          if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007,  2);
                          }
          }
          break;
        case SSHARP:
                          ASTFunNode jjtn008 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc008 = true;
                          jjtree.openNodeScope(jjtn008);
          try {
            jj_consume_token(SSHARP);
            UnaryExpression();
                                  jjtree.closeNodeScope(jjtn008,  2);
                                  jjtc008 = false;
                                  jjtn008.setOperator(opSet.getDecatenate());
          } catch (Throwable jjte008) {
                          if (jjtc008) {
                            jjtree.clearNodeScope(jjtn008);
                            jjtc008 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte008 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte008;}
                          }
                          if (jjte008 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte008;}
                          }
                          {if (true) throw (Error)jjte008;}
          } finally {
                          if (jjtc008) {
                            jjtree.closeNodeScope(jjtn008,  2);
                          }
          }
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
                           Operator op = null; Object dim = null;
    if (jj_2_3(2147483647)) {
      jj_consume_token(PLUS);
      UnaryExpression();
    } else if (jj_2_4(2147483647)) {
          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MINUS);
        UnaryExpression();
                  jjtree.closeNodeScope(jjtn001,  1);
                  jjtc001 = false;
                  jjtn001.setOperator(opSet.getUMinus());
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(NOT);
          UnaryExpression();
                  jjtree.closeNodeScope(jjtn002,  1);
                  jjtc002 = false;
                  jjtn002.setOperator(opSet.getNot());
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  1);
          }
        }
        break;
      case AT:
          ASTFunNode jjtn003 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(AT);
          UnaryExpression();
                  jjtree.closeNodeScope(jjtn003,  1);
                  jjtc003 = false;
                  jjtn003.setOperator(opSet.getSize());
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  1);
          }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_5(2147483647)) {
          ASTFunNode jjtn004 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          try {
            op = ModifiableOperator();
            jj_consume_token(DIV);
            jj_consume_token(LSQ);
            dim = RealConstant();
            jj_consume_token(RSQ);
                        jjtn004.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("/");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
            UnaryExpression();
          } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte004;}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) throw (ParseException)jjte004;}
          }
          {if (true) throw (Error)jjte004;}
          } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  3);
          }
          }
        } else if (jj_2_6(2147483647)) {
          ASTFunNode jjtn005 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          try {
            op = ModifiableOperator();
            jj_consume_token(PIPE);
            jj_consume_token(LSQ);
            dim = RealConstant();
            jj_consume_token(RSQ);
                        jjtn005.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("|");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
            UnaryExpression();
          } catch (Throwable jjte005) {
          if (jjtc005) {
            jjtree.clearNodeScope(jjtn005);
            jjtc005 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte005 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte005;}
          }
          if (jjte005 instanceof ParseException) {
            {if (true) throw (ParseException)jjte005;}
          }
          {if (true) throw (Error)jjte005;}
          } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  3);
          }
          }
        } else if (jj_2_7(2147483647)) {
          ASTFunNode jjtn006 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          try {
            op = ModifiableOperator();
            jj_consume_token(BDIV);
            jj_consume_token(LSQ);
            dim = RealConstant();
            jj_consume_token(RSQ);
                        jjtn006.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("\u005c\u005c");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
            UnaryExpression();
          } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
          } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006,  3);
          }
          }
        } else if (jj_2_8(2147483647)) {
          ASTFunNode jjtn007 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          try {
            op = ModifiableOperator();
                        jjtn007.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("/");
                        jjtree.pushNode(leftarg);
            jj_consume_token(DIV);
            UnaryExpression();
          } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
          } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007,  2);
          }
          }
        } else if (jj_2_9(2147483647)) {
          ASTFunNode jjtn008 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          try {
            op = ModifiableOperator();
                        jjtn008.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("|");
                        jjtree.pushNode(leftarg);
            jj_consume_token(PIPE);
            UnaryExpression();
          } catch (Throwable jjte008) {
          if (jjtc008) {
            jjtree.clearNodeScope(jjtn008);
            jjtc008 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte008 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte008;}
          }
          if (jjte008 instanceof ParseException) {
            {if (true) throw (ParseException)jjte008;}
          }
          {if (true) throw (Error)jjte008;}
          } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008,  2);
          }
          }
        } else if (jj_2_10(2147483647)) {
          ASTFunNode jjtn009 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
          try {
            op = ModifiableOperator();
                        jjtn009.setOperator(op);
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("\u005c\u005c");
                        jjtree.pushNode(leftarg);
            jj_consume_token(BDIV);
            UnaryExpression();
          } catch (Throwable jjte009) {
          if (jjtc009) {
            jjtree.clearNodeScope(jjtn009);
            jjtc009 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte009 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte009;}
          }
          if (jjte009 instanceof ParseException) {
            {if (true) throw (ParseException)jjte009;}
          }
          {if (true) throw (Error)jjte009;}
          } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009,  2);
          }
          }
        } else if (jj_2_11(1)) {
          PowerExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public Operator ModifiableOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                  {if (true) return opSet.getAdd();}
      break;
    case MUL:
      jj_consume_token(MUL);
                  {if (true) return opSet.getMultiply();}
      break;
    case MINUS:
      jj_consume_token(MINUS);
                  {if (true) return opSet.getSubtract();}
      break;
    case DIV:
      jj_consume_token(DIV);
                  {if (true) return opSet.getDivide();}
      break;
    case MOD:
      jj_consume_token(MOD);
                  {if (true) return opSet.getMod();}
      break;
    case POWER:
      jj_consume_token(POWER);
                  {if (true) return opSet.getPower();}
      break;
    case AND:
      jj_consume_token(AND);
                  {if (true) return opSet.getAnd();}
      break;
    case OR:
      jj_consume_token(OR);
                  {if (true) return opSet.getOr();}
      break;
    case GT:
      jj_consume_token(GT);
                  {if (true) return opSet.getGT();}
      break;
    case LT:
      jj_consume_token(LT);
                  {if (true) return opSet.getLT();}
      break;
    case EQ:
      jj_consume_token(EQ);
                  {if (true) return opSet.getEQ();}
      break;
    case LE:
      jj_consume_token(LE);
                  {if (true) return opSet.getLE();}
      break;
    case GE:
      jj_consume_token(GE);
                  {if (true) return opSet.getGE();}
      break;
    case NE:
      jj_consume_token(NE);
                  {if (true) return opSet.getNE();}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void PowerExpression() throws ParseException {
    UnaryExpressionNotPlusMinus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
                          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(POWER);
        UnaryExpression();
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                  jjtn001.setOperator(opSet.getPower());
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      AnyConstant();
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_12(1)) {
        if ((
                                (getToken(1).kind == IDENTIFIER1 || getToken(1).kind == IDENTIFIER2)
                                        &&              // modified by lm, to deal with custom functions
                                (jep.funTab.containsKey(getToken(1).image) || (jep.symTab.containsKey(getToken(1).image) && getToken(1).image.startsWith("_") && !getToken(1).image.startsWith("__")))
                        )) {
          Function();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER1:
          case IDENTIFIER2:
            Variable();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LRND:
          jj_consume_token(LRND);
          Expression();
          jj_consume_token(RRND);
          break;
        case LSQ:
          ListExpression();
          break;
        case LCURLY:
          DefinedExpression();
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ListExpression() throws ParseException {
                                  /*@bgen(jjtree) FunNode */
  ASTFunNode jjtn000 = new ASTFunNode(JJTFUNNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(50)) {
        jj_consume_token(LSQ);
        if (jj_2_13(1)) {
          Expression();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_8;
            }
            jj_consume_token(COMMA);
            Expression();
          }
        } else {
          ;
        }
        jj_consume_token(RSQ);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setOperator(opSet.getList());
      } else if (jj_2_15(50)) {
        jj_consume_token(LSQ);
        Expression();
        jj_consume_token(COLON);
        Expression();
        jj_consume_token(COLON);
        Expression();
        jj_consume_token(RSQ);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setOperator(opSet.getList2());
      } else if (jj_2_16(50)) {
        jj_consume_token(LSQ);
        Expression();
        jj_consume_token(COLON);
        Expression();
        jj_consume_token(RSQ);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setOperator(opSet.getList2());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DefinedExpression() throws ParseException {
                                     /*@bgen(jjtree) FunNode */
  ASTFunNode jjtn000 = new ASTFunNode(JJTFUNNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LCURLY);
      Expression();
      jj_consume_token(RCURLY);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setOperator(opSet.getDefExpr());
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Variable() throws ParseException {
                    String identString = "";
    if (jj_2_17(50)) {
      identString = Identifier();
                        if(!symTab.containsKey(identString)) {
                                addToErrorList(JEP.getMessage("JEP.ERR.UNREC_LIST") + ": \u005c"" + identString +"\u005c""); // modified by lm
                        }
      jj_consume_token(LSQ);
      ListSelector(identString);
      jj_consume_token(RSQ);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER1:
      case IDENTIFIER2:
          ASTVarNode jjtn001 = new ASTVarNode(JJTVARNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          identString = Identifier();
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                        if(symTab.containsKey(identString)) {
                                jjtn001.setVar(symTab.getVar(identString));
                        } else {
                                if(jep.allowUndeclared) {
                                        jjtn001.setVar(symTab.makeVarIfNeeded(identString));
                                } else {
                                        addToErrorList(JEP.getMessage("JEP.ERR.UNREC_VAR") + ": \u005c"" + identString +"\u005c""); // modified by lm
                                }
                        }
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ListSelector(String listName) throws ParseException {
          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
                        jjtn001.setFunction("get", (PostfixMathCommandI)jep.funTab.get("get"));
                        ASTVarNode leftarg = new ASTVarNode(JJTVARNODE);
                        leftarg.setVar(symTab.getVar(listName));
                        jjtree.pushNode(leftarg);
      Expression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void Function() throws ParseException {
                    int reqArguments = 0; String identString = ""; Object dim = null;
    if (jj_2_18(20)) {
          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        identString = Identifier();
                        if(jep.funTab.containsKey(identString)) {
                                reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                                jjtn001.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                        } else if(jep.symTab.containsKey(identString)) { // added by lm: custom (user-defined) function
                                reqArguments = -1;
                                jjtn001.setFunction("exec", (PostfixMathCommandI)jep.funTab.get("exec"));
                                ASTVarNode leftarg = new ASTVarNode(JJTVARNODE);
                                leftarg.setVar(symTab.getVar(identString));
                                jjtree.pushNode(leftarg);
                        } else {
                                addToErrorList(JEP.getMessage("JEP.ERR.UNREC_FUN") + ": \u005c"" + identString + "\u005c""); // modified by lm
                        }
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_19(2147483647)) {
          ASTFunNode jjtn002 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        identString = Identifier();
        jj_consume_token(DIV);
        jj_consume_token(LSQ);
        dim = RealConstant();
        jj_consume_token(RSQ);
                        reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                        jjtn002.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("/");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
    } else if (jj_2_20(2147483647)) {
          ASTFunNode jjtn003 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        identString = Identifier();
        jj_consume_token(PIPE);
        jj_consume_token(LSQ);
        dim = RealConstant();
        jj_consume_token(RSQ);
                        reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                        jjtn003.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("|");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
    } else if (jj_2_21(2147483647)) {
          ASTFunNode jjtn004 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
        identString = Identifier();
        jj_consume_token(BDIV);
        jj_consume_token(LSQ);
        dim = RealConstant();
        jj_consume_token(RSQ);
                        reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                        jjtn004.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                        ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                        leftarg.setValue("\u005c\u005c");
                        jjtree.pushNode(leftarg);
                        ASTConstant leftarg2 = new ASTConstant(JJTCONSTANT);
                        leftarg2.setValue(dim);
                        jjtree.pushNode(leftarg2);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte004;}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) throw (ParseException)jjte004;}
          }
          {if (true) throw (Error)jjte004;}
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
      }
    } else if (jj_2_22(20)) {
          ASTFunNode jjtn005 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
        identString = Identifier();
                        if(jep.funTab.containsKey(identString)) {
                                reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                                jjtn005.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                                ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                                leftarg.setValue("/");
                                jjtree.pushNode(leftarg);
                        } else {
                                addToErrorList(JEP.getMessage("JEP.ERR.UNREC_FUN") + ": \u005c"" + identString + "\u005c"");
                        }
        jj_consume_token(DIV);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte005) {
          if (jjtc005) {
            jjtree.clearNodeScope(jjtn005);
            jjtc005 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte005 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte005;}
          }
          if (jjte005 instanceof ParseException) {
            {if (true) throw (ParseException)jjte005;}
          }
          {if (true) throw (Error)jjte005;}
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
      }
    } else if (jj_2_23(20)) {
          ASTFunNode jjtn006 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
      try {
        identString = Identifier();
                        if(jep.funTab.containsKey(identString)) {
                                reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                                jjtn006.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                                ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                                leftarg.setValue("|");
                                jjtree.pushNode(leftarg);
                        } else {
                                addToErrorList(JEP.getMessage("JEP.ERR.UNREC_FUN") + ": \u005c"" + identString + "\u005c"");
                        }
        jj_consume_token(PIPE);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
      }
    } else if (jj_2_24(20)) {
          ASTFunNode jjtn007 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
      try {
        identString = Identifier();
                        if(jep.funTab.containsKey(identString)) {
                                reqArguments = ((PostfixMathCommandI)jep.funTab.get(identString)).getNumberOfParameters();
                                jjtn007.setFunction(identString, (PostfixMathCommandI)jep.funTab.get(identString));
                                ASTConstant leftarg = new ASTConstant(JJTCONSTANT);
                                leftarg.setValue("\u005c\u005c");
                                jjtree.pushNode(leftarg);
                        } else {
                                addToErrorList(JEP.getMessage("JEP.ERR.UNREC_FUN") + ": \u005c"" + identString + "\u005c"");
                        }
        jj_consume_token(BDIV);
        jj_consume_token(LRND);
        ArgumentList(reqArguments, identString);
        jj_consume_token(RRND);
      } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
      } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArgumentList(int reqArguments, String functionName) throws ParseException {
                                                             int count = 0; String errorStr = "";
    if (jj_2_25(1)) {
      Expression();
                          count++;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        Expression();
                          count++;
      }
    } else {
      ;
    }
                        if(reqArguments != count && reqArguments != -1) {
                                errorStr = JEP.getMessage("JEP.ERR.FUN") + " \u005c"" + functionName + "\u005c" " + JEP.getMessage("JEP.ERR.REQ") + " " + reqArguments + " ";  // modified by lm
                                if(reqArguments != 1) errorStr += JEP.getMessage("JEP.ERR.PARAMS");
                                else errorStr += JEP.getMessage("JEP.ERR.PARAM");
                                addToErrorList(errorStr);
                        }
  }

  final public String Identifier() throws ParseException {
                        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER1:
      t = jj_consume_token(IDENTIFIER1);
      break;
    case IDENTIFIER2:
      t = jj_consume_token(IDENTIFIER2);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void AnyConstant() throws ParseException {
                                /*@bgen(jjtree) Constant */
                                 ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t; Object value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        // strip away double quotes at end of string
                        String temp = (t.image).substring(1,t.image.length()-1);
                        // replace escape characters
                        temp = replaceEscape(temp);
                        jjtn000.setValue(temp);
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
        value = RealConstant();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.setValue(value);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Object RealConstant() throws ParseException {
                          Token t; Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        try {
                                value = jep.getNumberFactory().createNumber(t.image);
                        } catch (Exception e) {
                                value = null;
                                addToErrorList(JEP.getMessage("JEP.ERR.PARSE") + " \u005c"" + t.image + "\u005c""); // modified by lm
                        }
                        {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LCURLY)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(SSHARP)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(SHARP)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LSQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(CROSS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = (
                        (getToken(1).kind == IDENTIFIER1 || getToken(1).kind == IDENTIFIER2)
                                &&              // modified by lm, to deal with custom functions
                        (jep.funTab.containsKey(getToken(1).image) || (jep.symTab.containsKey(getToken(1).image) && getToken(1).image.startsWith("_") && !getToken(1).image.startsWith("__")))
                );
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(BDIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RSQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x10000000,0x8000000,0x4800000,0x4800000,0x3600000,0x3600000,0x60000000,0x60000000,0x80000000,0x0,0xffe00000,0x0,0x9000,0xa80,0x0,0x100000,0x9000,0x100000,0x100000,0x9000,0xa80,0x280,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6093,0x8020,0x52,0x40,0x0,0x0,0x80500,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[25];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 25; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
